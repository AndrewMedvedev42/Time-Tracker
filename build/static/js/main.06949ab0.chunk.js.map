{"version":3,"sources":["Stopwatch.js","App.js","reportWebVitals.js","index.js"],"names":["Timerz","name","child","useState","timer","setTimer","isActive","setIsActive","isPaused","setIsPaused","increment","useRef","className","getSeconds","slice","minutes","Math","floor","getMinutes","getHours","formatTime","onClick","clearInterval","current","setInterval","disabled","App","React","setName","timerNameList","setTimerNameList","addNewTimer","useCallback","alert","some","timerName","prevList","localStorage","setItem","Date","now","i","key","console","log","length","value","onChange","e","target","map","item","newTimers","filter","removeItem","deleteTimer","size","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06949ab0.chunk.js","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport { useRef } from 'react';\n// import Timer from 'react-compound-timer'\n// import { FaPlay } from 'react-icons/fa';\n// import { FaPause } from 'react-icons/fa';\n\n\n\nfunction Timerz ({name, child}) {\n\n  const [timer, setTimer] = useState(0)\n  const [isActive, setIsActive] = useState(false)\n  const [isPaused, setIsPaused] = useState(false)\n  const increment = useRef(null)\n\n  const handleStart = () => {\n    setIsActive(true)\n    setIsPaused(true)\n    increment.current = setInterval(() => {\n      setTimer((timer) => timer + 1)\n    }, 1000)\n  }\n\n  const handlePause = () => {\n    clearInterval(increment.current)\n    setIsPaused(false)\n  }\n\n  const handleResume = () => {\n    setIsPaused(true)\n    increment.current = setInterval(() => {\n      setTimer((timer) => timer + 1)\n    }, 1000)\n  }\n\n  const handleReset = () => {\n    clearInterval(increment.current)\n    setIsActive(false)\n    setIsPaused(false)\n    setTimer(0)\n  }\n\n  const formatTime = () => {\n    const getSeconds = `0${(timer % 60)}`.slice(-2)\n    const minutes = `${Math.floor(timer / 60)}`\n    const getMinutes = `0${minutes % 60}`.slice(-2)\n    const getHours = `0${Math.floor(timer / 3600)}`.slice(-2)\n\n    return `${getHours} : ${getMinutes} : ${getSeconds}`\n  }\n\n  return (\n    <div className=\"app\">\n      <h3>{name}</h3>\n      <div className='stopwatch-card'>\n        <p>{formatTime()}</p>\n        <div className='buttons'>\n          {\n            !isActive && !isPaused ?\n              <button onClick={handleStart}>Start</button>\n              : (\n                isPaused ? <button onClick={handlePause}>Pause</button> :\n                  <button onClick={handleResume}>Resume</button>\n              )\n          }\n          <button onClick={handleReset} disabled={!isActive}>Reset</button>\n          {child}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n//   return (<Timer\n//     initialTime={0}\n//     startImmediately={false}>\n\n//     {({ start, resume, pause, stop, reset, timerState }) => (\n//         <section className=\"TimerStyle\">\n//           <h3 className=\"timerTitle\">{`${name}`}</h3>\n//             <div className=\"timerNumbesr\">\n//                 <Timer.Days />:\n//                 <Timer.Hours/>:\n//                 <Timer.Minutes/>:\n//                 <Timer.Seconds/>\n//                 {/* <Timer.Milliseconds /> milliseconds */}\n//             </div>\n//             {/* <div>{timerState}</div> */}\n//             <br />\n//             <div className=\"TimerButtonStyle\">\n//                 <button onClick={start}>{<FaPlay/>}</button>\n//                 <button onClick={pause}>{<FaPause/>}</button>\n//                 {/* <button onClick={resume}>Resume</button> */}\n//                 {/* <button onClick={stop}>Stop</button> */}\n//                 {/* <button onClick={reset}>Reset</button> */}\n//                 {child}\n//             </div>\n//         </section>\n//     )}\n// </Timer>)\n\n\nexport default Timerz;","import React from \"react\"\nimport Timerz from \"./Stopwatch\"\nimport { FaTimes } from 'react-icons/fa';\n\n//Main app\nfunction App() {\n\n  const [name, setName] = React.useState('')\n\n  //creating an array of names that were typed in input field\n\n  const [timerNameList, setTimerNameList] = React.useState([])\n\n  const onChange = (e) =>{\n    setName(e.target.value)\n  }\n\nfunction setExisting(){\nfor(let i = 0; i<localStorage.length; i++){\n  setTimerNameList((prevList)=>[localStorage.key(i), ...prevList])\n  console.log(i)\n}}\n\n//function that checks name and sets new name to array\n  const addNewTimer = React.useCallback(() => {\n    if(name === \"\"){\n      alert(\"Input field is empty!\")\n    }else if(timerNameList.some((timerName) => timerName === name)){\n      alert(`Name: ${name} already exists!`)\n    }else{\n      setTimerNameList((prevList)=>[name, ...prevList])\n      localStorage.setItem(name, Date.now())//sets name to local storage(Date.naw() is here just to set dummy value for key))\n    }\n  },[name, timerNameList])\n\n  //deletes chossed name from array\n\n  const deleteTimer = (name) =>{\n    let newTimers = timerNameList.filter((timerName) => timerName !== name)\n    localStorage.removeItem(name)//deletes key name from localStorage. Craetion of componets of stored names is in progress\n    setTimerNameList(newTimers)\n  }\n\n return (\n    <section >\n      <button className=\"deployButton\" onClick={setExisting}>Set Existing Timers</button>\n      <div className=\"mainSection\">\n      <h1>Tracker</h1>\n        <div className=\"inputSection\">\n          <input className=\"inputField\" value={name} onChange={onChange}/>\n          <button className=\"deployButton\" onClick={addNewTimer}>Craete</button>\n        </div>\n      </div>\n      <div className=\"deployedTimers\" >\n        {timerNameList.map((item)=><Timerz key={item} name={item} child={<button onClick={()=>(deleteTimer(item))}>{<FaTimes size={15}/>}</button>}/>)}\n      </div>\n    </section>\n  );\n}\n//in \"deployedTimers\" div the folleowing code creates component for each name in array of names\n\nexport default App;\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}