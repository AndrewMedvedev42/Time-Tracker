{"version":3,"sources":["Stopwatch.js","App.js","reportWebVitals.js","index.js"],"names":["Timerz","name","child","count","useState","timer","setTimer","isActive","setIsActive","isPaused","setIsPaused","increment","useRef","localStorage","setItem","className","getSeconds","slice","minutes","Math","floor","getMinutes","getHours","formatTime","class","onClick","clearInterval","current","setInterval","disabled","App","React","setName","timerNameList","setTimerNameList","addNewTimer","useCallback","alert","some","timerName","prevList","checkCount","getItem","parseInt","i","key","item","length","value","onChange","e","target","map","newTimers","filter","removeItem","deleteTimer","size","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5ffe251.chunk.js","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport { useRef } from 'react';\n// import Timer from 'react-compound-timer'\nimport { FaPlay } from 'react-icons/fa';\nimport { FaPause } from 'react-icons/fa';\nimport {FaSquare} from 'react-icons/fa'\n\nfunction Timerz ({name, child, count}) {\n\n  const [timer, setTimer] = useState(count)\n  const [isActive, setIsActive] = useState(false)\n  const [isPaused, setIsPaused] = useState(false)\n  const increment = useRef(null)\n\n  const handleStart = () => {\n    setIsActive(true)\n    setIsPaused(true)\n    increment.current = setInterval(() => {\n      setTimer((timer) => timer + 1)\n    }, 1000)\n  }\n\n  const handlePause = () => {\n    clearInterval(increment.current)\n    setIsPaused(false)\n  }\n\n  const handleResume = () => {\n    setIsPaused(true)\n    increment.current = setInterval(() => {\n      setTimer((timer) => timer + 1)\n    }, 5)\n  }\n\n  const handleReset = () => {\n    clearInterval(increment.current)\n    setIsActive(false)\n    setIsPaused(false)\n    setTimer(0)\n  }\n\n  const formatTime = () => {\n    const getSeconds = `0${(timer % 60)}`.slice(-2)\n    const minutes = `${Math.floor(timer / 60)}`\n    const getMinutes = `0${minutes % 60}`.slice(-2)\n    const getHours = `0${Math.floor(timer / 3600)}`.slice(-2)\n\n    return `${getHours} : ${getMinutes} : ${getSeconds}`\n  }\n\n  localStorage.setItem(name, timer)\n\n  return (\n    <div className=\"timerSection\">\n      <h3>{name}</h3>\n      <div className='timerSecMinHour'>\n        <p>{formatTime()}</p>\n        <div className='buttonsSection'>\n          {\n            !isActive && !isPaused ?\n              <button class=\"btn btnPlay\" onClick={handleStart}><FaPlay/></button>\n              : (\n                isPaused ? <button class=\"btn pauseBtn\" onClick={handlePause}><FaPause/></button> :\n                  <button class=\"btn btnPlay\" onClick={handleResume}><FaPlay/></button>\n              )\n          }\n          <button class=\"btn btnReset\" onClick={handleReset} disabled={!isActive}><FaSquare/></button>\n          {child}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n//   return (<Timer\n//     initialTime={0}\n//     startImmediately={false}>\n\n//     {({ start, resume, pause, stop, reset, timerState }) => (\n//         <section className=\"TimerStyle\">\n//           <h3 className=\"timerTitle\">{`${name}`}</h3>\n//             <div className=\"timerNumbesr\">\n//                 <Timer.Days />:\n//                 <Timer.Hours/>:\n//                 <Timer.Minutes/>:\n//                 <Timer.Seconds/>\n//                 {/* <Timer.Milliseconds /> milliseconds */}\n//             </div>\n//             {/* <div>{timerState}</div> */}\n//             <br />\n//             <div className=\"TimerButtonStyle\">\n//                 <button onClick={start}>{<FaPlay/>}</button>\n//                 <button onClick={pause}>{<FaPause/>}</button>\n//                 {/* <button onClick={resume}>Resume</button> */}\n//                 {/* <button onClick={stop}>Stop</button> */}\n//                 {/* <button onClick={reset}>Reset</button> */}\n//                 {child}\n//             </div>\n//         </section>\n//     )}\n// </Timer>)\n\n\nexport default Timerz;","import React from \"react\"\nimport Timerz from \"./Stopwatch\"\nimport {FaTimes } from 'react-icons/fa';\nimport \"./index.css\"\n\n//Main app\nfunction App() {\n\n  const [name, setName] = React.useState('')\n\n  //creating an array of names that were typed in input field\n\n  const [timerNameList, setTimerNameList] = React.useState([])\n\n  const onChange = (e) =>{\n    setName(e.target.value)\n  }\n\n//function that checks name and sets new name to array\n  const addNewTimer = React.useCallback(() => {\n    if(name === \"\"){\n      alert(\"Input field is empty!\")\n    }else if(timerNameList.some((timerName) => timerName === name)){\n      alert(`Name: ${name} already exists!`)\n    }else{\n      setTimerNameList((prevList)=>[name, ...prevList])\n      localStorage.setItem(name, 0)//sets name to local storage(Date.naw() is here just to set dummy value for key))\n    }\n  },[name, timerNameList])\n\n  //deletes chossed name from array\n  const deleteTimer = (name) =>{\n    let newTimers = timerNameList.filter((timerName) => timerName !== name)\n    localStorage.removeItem(name)//deletes key name from localStorage. Craetion of componets of stored names is in progress\n    setTimerNameList(newTimers)\n  }\n\n\n\n  const setExisting = () => {\n    for(let i =0; i<localStorage.length; i++){\n    let key = localStorage.key(i)\n\n    if(timerNameList.some((item)=> item === key)){\n      alert(`Sorry,${key} already deployed!`)\n\n    }else{\n      setTimerNameList((prevList)=>[key, ...prevList])\n\n    }}}\n\n\n\n  function checkCount(name){\n    if(localStorage.getItem(name) !== 0){\n      return parseInt(localStorage.getItem(name))\n    }else{\n      return 0\n    }\n  }\n\n return (\n    <section >\n      <button className=\"deployButton\" onClick={setExisting}>Show Existing Timers</button>\n      <div className=\"mainSection\">\n      <h1>Tracker</h1>\n        <div className=\"inputSection\">\n          <input className=\"inputField\" value={name} onChange={onChange}/>\n          <button className=\"deployButton\" onClick={addNewTimer}>Craete</button>\n        </div>\n      </div>\n      <div className=\"deployedTimers\" >\n        {timerNameList.map((item)=><Timerz key={item} name={item} count={checkCount(item)} child={<button class=\"btn btnClose\" onClick={()=>(deleteTimer(item))}>{<FaTimes size={16}/>}</button>}/>)}\n      </div>\n    </section>\n  );\n}\n//in \"deployedTimers\" div the folleowing code creates component for each name in array of names\n\nexport default App;\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}